## HASHTABLE结构

![image-20240303161117583](底层数据结构HASHTABLE.assets/image-20240303161117583.png)



## Hash渐进式扩容

为了实现渐进式扩容, 在dictgt外又封装一层dict

![image-20240303161307161](底层数据结构HASHTABLE.assets/image-20240303161307161.png)

reshape分为三步

1. 为新表ht[1]分配空间, 新表大小为第一个大于旧表used二倍的二次方幂, 旧表used为500, 则新表大小为1024
2. 迁移ht[0]到ht[1]. 在resape期间, 每次对字典增删改查, 程序会顺带迁移当前rehashidx在ht[0]上的对应数据, 并更新偏移索引. 如果当前rehashidx刚好在一个已删除的空位置上, 会继续往下找, 默认为再往下找十个
3. 当ht[0]迁移完之后, 将ht[0]和ht[1]指针对象互换, 同时把偏移索引的值设为-1, 表示rehash已完成.每次迁移完一个元素, 会检查一下是否完成整个迁移

> 渐进式扩容的核心就是操作时顺带迁移

## 扩容时机

负载因子: k = ht[0].used / ht[0].size

### 扩容

负载因子大于1, 如果服务器没有执行BGSAVE或BGREWRITEAOF, 就会发生扩容

负载因子大于5, 即使有复制命令, 也会发生扩容

### 缩容

负载因子小于0.1, 进行缩容, 新表大小为旧表used的二次方幂, used为500, 则为512